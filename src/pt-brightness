#!/usr/bin/env python3

# Probably needs to be in a package associated with the hub (pt-hub?)

import zmq
from ptdm_client import ptdm_message
import argparse

args = None
zmq_socket = None


def main():
    parse_args()
    connect_to_socket()
    process_args()
    cleanup()


def parse_args():
    global args

    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--brightness_value", help="Set brightness level [0-10] on pi-topHUB", type=int, choices=range(11))
    parser.add_argument("-i", "--increment_brightness", help="Increment brightness level on pi-topHUB", action="store_true")
    parser.add_argument("-d", "--decrement_brightness", help="Decrement brightness level on pi-topHUB", action="store_true")

    args = parser.parse_args()

    # Handle invalid command line parameter combinations
    if args.brightness_value and (args.increment_brightness or args.decrement_brightness):
        raise Exception("Cannot increment/decrement at the same time as setting brightness value")
    if args.increment_brightness and args.decrement_brightness:
        raise Exception("Cannot increment and decrement brightness at the same time")


def connect_to_socket():
    global zmq_socket

    print("Connecting to request server...")
    zmq_context_send = zmq.Context()
    zmq_socket = zmq_context_send.socket(zmq.REQ)
    zmq_socket.connect("tcp://127.0.0.1:3782")
    print("Connected to request server.")


def send_request(message_request_id, parameters):

    message = ptdm_message.Message.from_parts(message_request_id, parameters)
    zmq_socket.send_string(message.to_string())

    response_string = zmq_socket.recv_string()
    response = ptdm_message.Message.from_string(response_string)

    return response.message_id()


def process_args():
    # No parameters - return current brightness
    if not args.brightness_value and not args.increment_brightness and not args.decrement_brightness:
        print("CURRENT BRIGHTNESS")
        resp = send_request(ptdm_message.Message.REQ_GET_BRIGHTNESS, [])
        print("RESP: " + str(resp))
    elif args.brightness_value:
        print("SETTING BRIGHTNESS TO " + str(args.brightness_value))
        resp = send_request(ptdm_message.Message.REQ_SET_BRIGHTNESS, [str(args.brightness_value)])
        print("RESP: " + str(resp))
    elif args.increment_brightness:
        print("INCREMENTING BRIGHTNESS")
        resp = send_request(ptdm_message.Message.REQ_INCREMENT_BRIGHTNESS, [])
        print("RESP: " + str(resp))
    elif args.decrement_brightness:
        print("DECREMENTING BRIGHTNESS")
        resp = send_request(ptdm_message.Message.REQ_DECREMENT_BRIGHTNESS, [])
        print("RESP: " + str(resp))


def cleanup():
    print("Closing sockets...")
    zmq_socket.close()

    print("Done.")


if __name__ == "__main__":
    main()
