#!/usr/bin/python3

# Zenity message service
#       Needs to be started with systemd. Probably belongs to another package - unsure how to 'from ptdm_message import Message' without being in same directory

# Needs to be printing to systemd journal!
# cleanup() errors on Ctrl+C cancel

import zmq
from time import sleep
from threading import Thread
from ptdm_message import Message
from signal import signal
from signal import SIGINT
from signal import SIGTERM
from subprocess import Popen
from os import devnull
from os import environ


def cleanup():
    global continue_listening

    print("Closing sockets...")
    continue_listening = False
    thread.join()
    zmq_socket.close()
    print("Done.")


def display_critical_battery_warning_message():
    print("Displaying critical battery warning message")
    text = "Your pi-top's battery level is critically low. System will shut down shortly unless a charging cable is plugged in."
    with open(devnull, 'w') as null:
        Popen(["/usr/bin/zenity", "--info", "--text", text], env=dict(environ, DISPLAY=":0.0", XAUTHORITY="/home/pi/.Xauthority"), stderr=null)


def display_low_battery_warning_message():
    print("Displaying low battery warning message")
    text = "Your pi-top's battery level is low. Please plug in a charging cable to prevent your system from shutting down."
    with open(devnull, 'w') as null:
        Popen(["/usr/bin/zenity", "--info", "--text", text], env=dict(environ, DISPLAY=":0.0", XAUTHORITY="/home/pi/.Xauthority"), stderr=null)


def display_reboot_message():
    print("Displaying reboot message")
    text = "Recently detected hardware requires a system settings modification.\nPlease reboot to enable hardware support."
    with open(devnull, 'w') as null:
        Popen(["/usr/bin/zenity", "--info", "--text", text], env=dict(environ, DISPLAY=":0.0", XAUTHORITY="/home/pi/.Xauthority"), stderr=null)


def listen_thread():

    print("Connecting to publish server...")
    zmq_context_listen = zmq.Context()
    zmq_socket = zmq_context_listen.socket(zmq.SUB)
    zmq_socket.setsockopt_string(zmq.SUBSCRIBE, "")
    zmq_socket.connect("tcp://127.0.0.1:3781")
    print("Connected to publish server")

    sleep(0.5)

    while continue_listening:
        poller = zmq.Poller()
        poller.register(zmq_socket, zmq.POLLIN)
        events = poller.poll(500)

        for i in range(len(events)):
            message_string = zmq_socket.recv_string()
            message = Message.from_string(message_string)

            if (message.message_friendly_string() == "PUB_REBOOT_REQUIRED"):
                display_reboot_message()
            elif (message.message_friendly_string() == "PUB_LOW_BATTERY_WARNING"):
                display_low_battery_warning_message()
            elif (message.message_friendly_string() == "PUB_CRITICAL_BATTERY_WARNING"):
                display_critical_battery_warning_message()

# Capture and handle interrupts
signal(SIGINT, cleanup)
signal(SIGTERM, cleanup)

print("Starting thread...")

continue_listening = True
thread = Thread(target=listen_thread)
thread.start()
thread.join()
