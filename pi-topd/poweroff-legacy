#!/usr/bin/python3
from distutils.version import StrictVersion
from platform import uname
from spidev import SpiDev
from time import sleep

# Script to send a poweroff command to the pi-top hub. Typically this
# is launched by systemd responding to halt.target/poweroff.target, to
# ensure the hub shuts down after the Raspberry Pi

MASK_SHUTDOWN = 0x01    # 00000001
MASK_SCREEN_OFF = 0x02  # 00000010
MASK_LID_CLOSED = 0x04  # 00000100
MASK_BRIGHTNESS = 0x78  # 01111000
MASK_PARITY = 0x80      # 10000000


screen_off = False
brightness = 0
request_shutdown = False


def using_old_kernel():
    current_version_name = uname().release.split("-")[0]
    return StrictVersion(current_version_name) < StrictVersion("5.0.0")


def parity7(data):
    p = False
    for _ in range(7):
        if (data & 1):
            p = not p

        data = data >> 1

    return p


def calculate():
    data = brightness << 3

    if parity7(brightness):
        data += MASK_PARITY

    if request_shutdown:
        data += MASK_SHUTDOWN

    if screen_off:
        data += MASK_SCREEN_OFF

    if parity7(data & 3):
        data += MASK_LID_CLOSED  # parity of the two state bits

    return data


def setup_spi_obj():
    spi_obj = SpiDev()
    spi_obj.open(0, 1)
    spi_obj.max_speed_hz = 9600
    spi_obj.mode = 0b00
    spi_obj.bits_per_word = 8
    spi_obj.cshigh = True
    spi_obj.lsbfirst = False

    return spi_obj


def send_data(spi_obj, data):
    print(f"Sending: {hex(data)}")

    if using_old_kernel():
        spi_obj.cshigh = False

    resp = spi_obj.xfer2([data], spi_obj.max_speed_hz)

    spi_obj.cshigh = True

    print(f"Receiving: {hex(resp[0])}")

    return resp[0]


print("pi-top poweroff-legacy (for v1 hubs - Original pi-top/pi-topCEED")
sleep(5)  # Let other things finish first

spi = setup_spi_obj()

resp = send_data(spi, 0xff)

brightness = resp & MASK_BRIGHTNESS >> 3
print(f"Current brightness = {brightness}")

# Fix brightness if not within acceptable range
if brightness > 10:
    brightness = 10

if brightness < 3:
    brightness = 3

# Calculate data to send
request_shutdown = True
screen_off = True

send_data(spi, calculate())
